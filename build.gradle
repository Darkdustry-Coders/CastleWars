import groovy.json.JsonSlurper
import java.nio.file.Files
import java.nio.file.StandardCopyOption

plugins {
    id "java"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
    maven { url = "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven { url = "https://jitpack.io" }
}

def json = (new JsonSlurper()).parse("src/main/resources/plugin.json" as File)
def mindustryVersion = json["minGameVersion"]
def usefulHash = "2f1d9eb899"
project.version = json["version"]

dependencies {
    compileOnly "com.github.Anuken.Arc:arc-core:v$mindustryVersion" 
    compileOnly "com.github.Anuken.Mindustry:core:v$mindustryVersion" 

    implementation "com.github.xzxADIxzx.useful-stuffs:bundle:$usefulHash" 
}

tasks.jar {
    from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.register("runServer") {
    dependsOn build

    doLast {
        def path = rootProject.rootDir.toPath().resolve("run")
        Files.createDirectories(path.resolve("config/mods"))
        Files.createDirectories(path.resolve("config/maps"))

        if (!Files.exists(path.resolve("server.jar"))) {
            println "Downloading Mindustry server..."
            Files.copy(
                    new URI("https://github.com/5GameMaker/MindustryHotfixv7/releases/download/v146.7/server-release.jar").toURL().openStream(),
                    path.resolve("server.jar"))
            Files.copy(
                    rootDir.toPath().resolve("assets/Prophit.msav"),
                    path.resolve("config/maps/Prophit.msav"))
            Files.copy(
                    rootDir.toPath().resolve("assets/settings.bin"),
                    path.resolve("config/settings.bin"))
        }

        Files.copy(
                jar.archiveFile.get().asFile.toPath(),
                path.resolve("config/mods/Debug.jar"),
                StandardCopyOption.REPLACE_EXISTING)

        javaexec {
            classpath = files(path.resolve("server.jar"))
            workingDir = path.toFile()
            standardInput = System.in

            debugOptions {
                enabled = true
                port = 7857
                server = true
                suspend = false
            }
        }
    }
}
